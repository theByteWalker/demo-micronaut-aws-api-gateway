import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'maven'
    id 'java'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jp.classmethod.aws.lambda" version "0.39"
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "org.jetbrains.kotlin.kapt" version "1.3.50"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.50"
    id "application"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.3.72"
}


description = """hello"""
version "dev"
group "hello.mn.fn"

sourceCompatibility = 8
targetCompatibility = 8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-function-aws"
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.amazonaws:aws-lambda-java-log4j2:1.0.0"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.9.1"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-kotlintest"
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"
    implementation "io.micronaut:micronaut-function-client"

   /* implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-log4j2', version: '1.1.0'
    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '2.2.7'*/

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+"

    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy")

    //Jpa

   /* kapt "io.micronaut.data:micronaut-data-processor"
    implementation "io.micronaut.data:micronaut-data-hibernate-jpa"
    implementation 'io.micronaut.configuration:micronaut-jdbc-hikari'
    implementation 'org.postgresql:postgresql:42.2.8'*/
}

test.classpath += configurations.developmentOnly
shadowJar {
    mergeServiceFiles()
//    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

//shadowJar {
//    mergeServiceFiles()
//}
tasks.withType(ShadowJar) {
    archiveBaseName.set("micronaut-aws")
    archiveClassifier.set("")
    archiveVersion.set("")
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}
mainClassName = "io.micronaut.function.executor.FunctionApplication"
applicationDefaultJvmArgs = [""]

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task deploy(type: Exec, dependsOn: 'shadowJar') {
    commandLine 'serverless', 'deploy'
}

build.finalizedBy(shadowJar)